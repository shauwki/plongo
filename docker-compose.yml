services:
  # --- Redis Service (for nc) ---
  redis:
    image: redis:alpine
    restart: always
    networks:
      - plongo-network
  # --- Nextcloud Services ---
  nextcloud_db:
    image: postgres:15
    restart: always
    volumes:
      - ./nextcloud/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD} 
    networks:
      - plongo-network

  nextcloud:
    image: nextcloud:apache
    restart: always
    # ports:
    #   - "8080:80"
    volumes:
      - ./nextcloud/html:/var/www/html
      - /home/devki/Nextcloud:/var/www/html/data
    environment:
      - POSTGRES_HOST=nextcloud_db
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD} 
      - NEXTCLOUD_TRUSTED_DOMAINS=${NEXTCLOUD_URL}
      - NEXTCLOUD_TRUSTED_PROXIES=cloudflared
      - OVERWRITEHOST=${NEXTCLOUD_URL}
      - OVERWRITEPROTOCOL=https
    depends_on:
      - nextcloud_db
    networks:
      - plongo-network
  web:
    build: ./web
    restart: always
    volumes:
      - ./web/html:/var/www/html 
    networks:
      - plongo-network

  n8n_db:
    image: postgres:14
    container_name: n8n_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${N8N_DB_USER}
      - POSTGRES_PASSWORD=${N8N_DB_PASSWORD}
      - POSTGRES_DB=${N8N_DB_NAME}
    volumes:
      - ./n8n/postgres_data:/var/lib/postgresql/data
    networks:
      - plongo-network

  n8n:
    image: n8nio/n8n
    container_name: plongo_n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_db
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
      - DB_POSTGRESDB_USER=${N8N_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_URL}
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://${N8N_URL}
      - GENERIC_TIMEZONE=Europe/Amsterdam
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    depends_on:
      - n8n_db
    volumes:
      - ./n8n/n8n_config:/home/node/.n8n
    networks:
      - plongo-network

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: plongo_homeassistant
    restart: always
    volumes:
      - ./homeassistant:/config 
      - /etc/localtime:/etc/localtime:ro
    networks:
      - plongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 30s
      timeout: 10s
      retries: 5

  jellyfin:
    image: jellyfin/jellyfin
    container_name: plongo_jellyfin
    restart: always
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    ports:
      - "8096:8096"
      - "8920:8920"
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/cache:/cache
      - /mnt/4tb/services/jelly/shows:/media/shows
      - /mnt/4tb/services/jelly/movies:/media/movies
    networks:
      - plongo-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: plongo_cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      - web
      - n8n
      - homeassistant
      - jellyfin
    networks:
      - plongo-network

networks:
  plongo-network:
    name: plongo-network
    driver: bridge