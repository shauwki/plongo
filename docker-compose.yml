services:
  web:
    container_name: plongo_website
    build: ./web
    restart: unless-stopped
    volumes:
      - ./web/html:/var/www/html 
    networks:
      - plongo-network

  redis:
    image: redis:alpine
    container_name: plongo_redis_db
    restart: unless-stopped
    networks:
      - plongo-network
  nextcloud_db:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - ./nextcloud/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD} 
    networks:
      - plongo-network
    depends_on:
      - redis

  nextcloud:
    image: nextcloud:apache
    container_name: plongo_nextcloud
    restart: unless-stopped
    volumes:
      - ./nextcloud/html:/var/www/html
      - /home/devki/Nextcloud:/var/www/html/data
    environment:
      - POSTGRES_HOST=nextcloud_db
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD} 
      - NEXTCLOUD_TRUSTED_DOMAINS=${NEXTCLOUD_URL}
      - NEXTCLOUD_TRUSTED_PROXIES=cloudflared
      - OVERWRITEHOST=${NEXTCLOUD_URL}
      - OVERWRITEPROTOCOL=https
    depends_on:
      - nextcloud_db
    networks:
      - plongo-network

  n8n_db:
    image: postgres:14
    container_name: plongo_n8n_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${N8N_DB_USER}
      - POSTGRES_PASSWORD=${N8N_DB_PASSWORD}
      - POSTGRES_DB=${N8N_DB_NAME}
    volumes:
      - ./n8n/postgres_data:/var/lib/postgresql/data
    networks:
      - plongo-network

  n8n:
    image: n8nio/n8n
    container_name: plongo_n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_db
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
      - DB_POSTGRESDB_USER=${N8N_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_URL}
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://${N8N_URL}
      - GENERIC_TIMEZONE=Europe/Amsterdam
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_TRUST_PROXY=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
    depends_on:
      - n8n_db
    volumes:
      - ./n8n/n8n_config:/home/node/.n8n
    networks:
      - plongo-network

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: plongo_homeassistant
    restart: unless-stopped
    volumes:
      - ./homeassistant:/config 
      - /etc/localtime:/etc/localtime:ro
    networks:
      - plongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 10s
      timeout: 3s
      retries: 3

  jellyfin:
    image: jellyfin/jellyfin
    container_name: plongo_jellyfin
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    ports:
      - "8096:8096"
      - "8920:8920"
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/cache:/cache
      - /mnt/4tb/services/jelly/shows:/media/shows
      - /mnt/4tb/services/jelly/movies:/media/movies
    networks:
      - plongo-network

  obsidian:
    build: ./obsidian
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./obsidian:/notes
    networks:
      - plongo-network
    environment:
      - OBSIDIAN_API_KEY=${OBSIDIAN_API_KEY}

  mqtt:
    image: eclipse-mosquitto:latest
    container_name: plongo_mqtt
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "1883:1883" 
      - "9001:9001" 
    stdin_open: true
    tty: true
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
    networks:
      - plongo-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: plongo_cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      homeassistant:
        condition: service_healthy
      n8n:
        condition: service_started # or service_completed_successfully idk
      mqtt:
        condition: service_started
    networks:
      - plongo-network

networks:
  plongo-network:
    name: plongo-network
    driver: bridge